"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeeMeGateway = void 0;
const https = __importStar(require("https"));
const crypto = __importStar(require("crypto"));
const GATEWAY_URL_HOST = 'seeme.hu';
const GATEWAY_URL_PATH = '/gateway';
const CHECKSUM_LENGTH = 4;
const API_VERSION = '2.0.1';
const RESPONSE_FORMAT = 'json';
/**
 * API Client
 */
class SeeMeGateway {
    constructor(options) {
        this.options = options || {};
        if (!this.options.apiKey) {
            throw new Error('API key required');
        }
        if (!this.validateApiKey(this.options.apiKey)) {
            throw new Error('Invalid API key');
        }
        if (!this.options.apiUrlHost) {
            this.options.apiUrlHost = GATEWAY_URL_HOST;
        }
        if (!this.options.apiUrlPath) {
            this.options.apiUrlPath = GATEWAY_URL_PATH;
        }
    }
    /**
     * Sends SMS. See parameters at https://seeme.hu/tudastar/reszletek/sms-gateway-parameterek
     * @param mobileNumber
     * @param message
     * @param sender
     * @param reference
     * @param callbackParams
     * @param callbackURL
     */
    sendSMS(mobileNumber, message, sender = '', reference = null, callbackParams = null, callbackURL = null) {
        const params = {
            apiVersion: API_VERSION,
            key: this.options.apiKey,
            message,
            number: mobileNumber,
            format: RESPONSE_FORMAT
        };
        if (sender) {
            params.sender = sender;
        }
        if (reference) {
            params.reference = reference;
        }
        if (callbackParams) {
            params.callback = callbackParams;
        }
        if (callbackURL) {
            params.callbackurl = callbackURL;
        }
        return this.callAPI(params);
    }
    /**
     * Get actual balance. See at https://seeme.hu/tudastar/reszletek/sms-gateway-egyenleg-lekerdezes
     */
    getBalance() {
        const params = {
            apiVersion: API_VERSION,
            key: this.options.apiKey,
            method: 'balance',
            format: RESPONSE_FORMAT,
        };
        return this.callAPI(params);
    }
    /**
     *
     * @param ip
     */
    setIP(ip) {
        const params = {
            apiVersion: API_VERSION,
            key: this.options.apiKey,
            method: 'setip',
            ip,
            format: RESPONSE_FORMAT,
        };
        return this.callAPI(params);
    }
    /**
     * Calls the HTTP service
     * @param params API parameters
     */
    callAPI(params) {
        const searchParams = new URLSearchParams(params);
        const options = {
            method: 'GET',
            protocol: 'https:',
            host: this.options.apiUrlHost,
            path: this.options.apiUrlPath + '?' + searchParams.toString()
        };
        return new Promise((resolve, reject) => {
            var req = https.request(options, (res) => {
                // reject on bad status
                if (res.statusCode < 200 || res.statusCode >= 300) {
                    return reject(new Error('statusCode=' + res.statusCode));
                }
                // cumulate data
                var body = [];
                res.on('data', (chunk) => {
                    body.push(chunk);
                });
                // resolve on end
                res.on('end', () => {
                    let responseJson = {};
                    try {
                        responseJson = JSON.parse(Buffer.concat(body).toString());
                    }
                    catch (e) {
                        reject(e);
                    }
                    resolve(responseJson);
                });
            });
            // reject on request error
            req.on('error', (err) => {
                // This is not a "Second reject", just a different sort of failure
                reject(err);
            });
            // IMPORTANT
            req.end();
        });
    }
    /**
     * Validate an API key
     * @param apiKey API key generated on seeme.hu
     * @returns True if success, otherwise False
     */
    validateApiKey(apiKey) {
        const key = apiKey.substr(0, apiKey.length - CHECKSUM_LENGTH);
        const checksum = apiKey.substr(apiKey.length - CHECKSUM_LENGTH);
        return (crypto.createHash('md5').update(key).digest('hex').substr(0, CHECKSUM_LENGTH) === checksum);
    }
}
exports.SeeMeGateway = SeeMeGateway;
//# sourceMappingURL=index.js.map